#!/usr/bin/perl -w
#
# Signal Poller for Hermod Gateway Bot.
#
# Keeping a tail on the tosignal file for messages to send to signal.
# Polling the signal group for new messages. These are send to telegram 
# and irc
#
# 2019, Ruben de Groot

use strict;
use JSON;
use TOML;
use WWW::Curl::Easy;
use WWW::Curl::Form;
use URI::Escape;
use DBI;
use Capture::Tiny 'tee';

open my $fh, '<', "/etc/hermod.toml" or die "error opening configuration $!";
my ($cfg, $e) = from_toml do { local $/; <$fh> };
unless ($cfg) {
    die "Error parsing toml: $e";
}

unless (defined $cfg->{signal}->{phone} and defined $cfg->{signal}->{cli} and
        defined $cfg->{signal}->{gid}) {
    print "Please define signal->phone, signal->cli and signal->gidi\n";
    print "Press <Ctrl>-C to continue\n";
    sleep; exit;
}
my $sig = $cfg->{signal};
$sig->{nicks} = getalias($sig);
open my $dbg, ">>", $sig->{debug} if defined $sig->{debug};
my $tel = $cfg->{telegram} if defined $cfg->{telegram};
my $irc = $cfg->{irc} if defined $cfg->{irc};
my $mat = $cfg->{matrix} if defined $cfg->{matrix};
my $wha = $cfg->{whatsapp} if defined $cfg->{whatsapp};

# tailing signal infile and telegram downloads for stuff to send
open my $tail, "<", $sig->{infile} or die @_;
my $inode = (stat($sig->{infile}))[1];
# SEEK_END
seek($tail, 0, 2) or die @_;
for (;;) {
    sleep 1; # not to get too tight loop

    # check if logfiles haven't turned over below our feet
    if ($inode != (stat($sig->{infile}))[1]) {
        close $tail;
        $inode = (stat($sig->{infile}))[1];
        open($tail,$sig->{infile}) or next;
    } else {
        # SEEK_CUR
        seek($tail, 0, 1);
    }

    # send new messages to signal group
    my $msg ='';
    while (my $line = <$tail>) {

        if ($line =~ /^FILE:/) {

            # send photo's, documents
            $line = substr $line,5;
            my ($fileinfo,$caption) = split / /, $line, 2; 
            my ($proto,$mime,$file) = split /:/, $fileinfo;
            my ($out, $err, $ret) = tee {
                system($sig->{cli},"-u",$sig->{phone},"send","-g",$sig->{gid},
                        "-m","$caption","-a","$file");
            };
            print $dbg $out, $err if defined $dbg;
            errorsend($err) if $err;
        } else {
            $msg .= $line;
        }
    }
    if ($msg) {

        my ($out, $err, $ret) = tee {
            system($sig->{cli},"-u",$sig->{phone},"send","-g", $sig->{gid}, "-m", "$msg");
        };
        print $dbg $out, $err if defined $dbg;
        errorsend($err) if $err;
    }

    # now poll the signal group for new messages
    my $json = JSON->new->allow_nonref;
    my ($out, $err, $ret) = tee {
        system($sig->{cli},"-u",$sig->{phone},"receive","--json");
    };
    print $dbg $out, $err if defined $dbg;
    errorsend($err) if $err;

    my @lines = split /\n/, $out;
    for my $line (@lines) {

        my $sigmsg = $json->decode($line);
        next unless defined $sigmsg->{envelope}->{dataMessage};
        $sigmsg = $sigmsg->{envelope};
        my $datamsg = $sigmsg->{dataMessage};

        my $sender = (defined $sigmsg->{source}) ? $sigmsg->{source} : "";
        my $group = (defined $datamsg->{groupInfo}->{groupId}) ? $datamsg->{groupInfo}->{groupId} : "";
        my $text = (defined $datamsg->{message}) ? $datamsg->{message} : "";
        my $attach = (defined $datamsg->{attachments}) ? $datamsg->{attachments} : undef;

        # anonymize sender telephone
        my $anonsender = $sender;
        if (defined $sig->{nicks}->{$sender}) {

            $anonsender = $sig->{nicks}->{$sender};
        } else {

            $anonsender =~ s/.*(\d\d\d\d)$/$cfg->{common}->{anon}-$1/;
            $sig->{nicks}->{$sender} = $anonsender;
            nickhelp($sig,$sender,$anonsender);
            setalias($sig,$sender,$anonsender);
        }

        # check for setnick command
        if ($text =~ /^!setnick/) {
            (my $nick = $text) =~ s/^!setnick ([\w]+).*$/$1/;
            if ($nick) {
                setalias($sig,$sender,$nick);
                $sig->{nicks}->{$sender} = $nick;
                $text = "$anonsender is now known as $nick\n";

                # notify the signal group
                open my $w, ">>", $sig->{infile} or die "Died opening file $sig->{infile}";
                print $w "$text";
                close $w;

                $text = "[sig] $text";

                # notify chats
                relay($text, $_) for $irc->{infile}, $mat->{infile}, $wha->{infile};

                if (defined $tel->{token} and defined $tel->{chat_id}) {

                    # notify the telegram group
                    my $URL = "https://api.telegram.org/bot$tel->{token}/sendMessage?chat_id=$tel->{chat_id}&text=";
                    my $telmsg;
                    eval { $telmsg = uri_escape($text); };
                    $telmsg = uri_escape_utf8($text) if $@;
                    qx( curl -s "$URL$telmsg" );
                }

                next;
            }
        } elsif ($text =~ /^!users/) {

            # user list asked; relay command to hermod
            relay("CMD!SIG!users\n", $irc->{infile});
            next;
        }

        # only relay group messages with contents
        next unless $group eq $sig->{gid};
        next unless $text or $attach;

        if (defined $tel->{token} and defined $tel->{chat_id} and $text =~ /\w/) {

            # relay to telegram
            my $telmsg;
            my $URL = "https://api.telegram.org/bot$tel->{token}/sendMessage?chat_id=$tel->{chat_id}&text=";
            eval { $telmsg = uri_escape("[sig] $anonsender: $text"); };
            $telmsg = uri_escape_utf8("[sig] $anonsender: $text") if $@;
            qx( curl -s "$URL$telmsg" );
        }

        # relay to IRC
        if (defined $irc->{infile} and $text =~ /\w/) {
            my @lines = split /\n/, $text;
            open my $w, ">>", $irc->{infile};
            for my $msg (@lines) {
                next unless $msg and defined $w;
    
                # send to IRC, split lines in chunks of ~maxmsg size if necessary
                if (length $msg > $irc->{maxmsg}) {
                    $msg =~ s/(.{1,$irc->{maxmsg}}\S|\S+)\s+/$1\n/g;
                    print $w "[sig] $anonsender: $_\n" for split /\n/, $msg;
                } else {
                    print $w "[sig] $anonsender: $msg\n";
                }
            }
            close $w;
        }

        # relay to Matrix, Whatsapp
        if ($text =~ /\w/) {

            my $msg = "[sig] $anonsender: $text\n";
            relay("[sig] $anonsender: $text\n", $_) for $mat->{infile}, $wha->{infile};
        }

        # relay optional attachments
        foreach my $att (@$attach) {
            (my $ext = $att->{contentType}) =~ s#.*/##;
            my ($msg, $URL, $type);
            rename "$sig->{attachments}/$att->{id}", "$sig->{attachments}/$att->{id}.$ext";
            if ($att->{contentType} =~ /image/) {
                $URL = "https://api.telegram.org/bot$tel->{token}/sendPhoto";
                $type = 'photo';
                $msg = "[sig] **$anonsender sends an image: $sig->{url}/$att->{id}.$ext\n";
            } else {
                $URL = "https://api.telegram.org/bot$tel->{token}/sendDocument";
                $type = 'document';
                $msg = "[sig] **$anonsender sends a document: $sig->{url}/$att->{id}.$ext\n";
            }

            # relay to telegram
            if (defined $tel->{chat_id}) {

                my $curl = WWW::Curl::Easy->new;
                $curl->setopt(CURLOPT_URL, $URL);
                my $curlf = WWW::Curl::Form->new;
                $curlf->formaddfile("$sig->{attachments}/$att->{id}.$ext", $type, "multipart/form-data");
                $curlf->formadd("chat_id", "$tel->{chat_id}");
                $curlf->formadd("caption", "[sig $ext $type sent by $anonsender]");
                $curl->setopt(CURLOPT_HTTPPOST, $curlf);
                my $retcode = $curl->perform;
                if ($retcode != 0) {
                    print "An error happened: $retcode ".$curl->strerror($retcode)." ".$curl->errbuf."\n";
                    print $dbg "An error happened: $retcode ".$curl->strerror($retcode)." ".$curl->errbuf."\n" if defined $dbg;
                }
            }

            # relay to irc, matrix, whatsapp
            relay($msg, $_) for $irc->{infile}, $mat->{infile}, $wha->{infile};
        }
    }
}

sub relay {
    my ($msg, $infile) = @_;
    return unless $infile and $msg;
    open my $w, ">>", $infile;
    print $w $msg if defined $w;
    close $w;
}

sub getalias {
    my $sig = shift;
    my $alias;
    my $dbh = DBI->connect("dbi:SQLite:dbname=$sig->{db}", "", "", { RaiseError => 1 }, ) or die $DBI::errstr;
    my $obj = $dbh->prepare("select * from alias");
    $obj->execute() or die $DBI::errstr;

    while (my $row = $obj->fetchrow_hashref()) {
        $alias->{$row->{phone}} = $row->{nick};
    }
    return $alias;
}

sub setalias {
    my ($sig,$phone,$nick) = @_;
    my $dbh = DBI->connect("dbi:SQLite:dbname=$sig->{db}", "", "", { RaiseError => 1 }, ) or die $DBI::errstr;
    $dbh->do("insert or replace into alias (phone,nick) values (?,?)", undef, $phone, $nick) or die $DBI::errstr;
    $dbh->disconnect();
}

sub nickhelp {
    my ($sig,$phone,$nick) = @_;
    my $text = 'You do not have a nickname set. You are now known as '.$nick;
    $text .= '. To change this, simply type !setnick yournickname on a new line in the group or in a private message to me.';
    my ($out, $err, $ret) = tee {
        system($sig->{cli},"-u",$sig->{phone},"send","-m","$text",$phone);
    };
    print $dbg $out, $err if defined $dbg;
    errorsend($err) if $err;
}

sub errorsend {
    my $err = shift;
    my $msg = '';
    my $hostname = qx( hostname ); chomp $hostname;

    # filters here
    if ($err =~ /Failed to send \(some\) messages:/) {
        while ($err =~ /Unregistered user (\+[\d]+): null/g) {
            unless (defined $sig->{unreg}->{$1}) {
                $sig->{unreg}->{$1} = 1;
                $msg .= " $1";
            }
        }
        $msg = "Unregistered users: $msg\n" if $msg;
    } else {
        $msg = $err;
    }
    return if defined $sig->{errors}->{$msg} and $sig->{errors}->{$msg} > time - 3600;
    $sig->{errors}->{$msg} = time;

    qx( $cfg->{common}->{errorsend} "Signalpoller on $hostname: $msg" ) if defined $cfg->{common}->{errorsend} and $msg;
}
