#!/usr/bin/perl
#
# IRC Bot for Hermod Telegram Gateway. Reads from a logfile to be send to irc and relays
# messages from irc to telegram and to another logfile which is send to a signal group
# by signalpoller.
# When twitter is configured, check for status updates of a twitter account and relay those.
#
# 2019, Ruben de Groot

use strict;
use warnings;
use POE qw(Component::IRC Component::IRC::Plugin::FollowTail Component::SSLify);
use HTTP::Tiny;
use URI::Escape;
use JSON qw( decode_json );
use Net::Twitter;

open my $fh, '<', "/etc/hermod.json" or die "error opening configuration $!";
my $cfg = decode_json do { local $/; <$fh> };
close $fh;
open my $dbg, ">>", $cfg->{ird}->{debug} if defined $cfg->{ird}->{debug};

my $URL = "https://api.telegram.org/bot$cfg->{telegram}->{token}/sendMessage";

# We create a new PoCo-IRC object
my $irc = POE::Component::IRC->spawn(
   nick     => $cfg->{irc}->{nick},
   ircname  => $cfg->{irc}->{ircname},
   username => $cfg->{irc}->{ident},
   server   => $cfg->{irc}->{node},
   Port     => $cfg->{irc}->{port},
   UseSSL   => $cfg->{irc}->{UseSSL},
) or die "Oh noooo! $!";

POE::Session->create(
    package_states => [
        main => [ qw(_default _start irc_001 irc_public irc_join irc_quit irc_tail_input irc_ctcp_action ) ],
    ],
    heap => { irc => $irc },
);

POE::Session->create(
    inline_states => {
      _start => sub {
        $_[KERNEL]->delay(tick => 60);
      },
      tick => sub {
        &wakeywakey;
        $_[KERNEL]->delay(tick => $cfg->{twitter}->{tick});
      },
    },
) if defined $cfg->{twitter}->{tick};

my $nt = Net::Twitter->new(
    traits   => [qw/API::RESTv1_1/],
    consumer_key        => $cfg->{twitter}->{consumer_key},
    consumer_secret     => $cfg->{twitter}->{consumer_secret},
    access_token        => $cfg->{twitter}->{token},
    access_token_secret => $cfg->{twitter}->{token_secret},
) if defined $cfg->{twitter}->{consumer_key};

$poe_kernel->run();

sub wakeywakey {
    # wakes up every twitter->tick seconds and checks for new status for twitter->screen_name
    return unless defined $cfg->{twitter}->{screen_names} and @{$cfg->{twitter}->{screen_names}};
    my $result = eval {
        my $s = $nt->lookup_users({screen_name => $cfg->{twitter}->{screen_names}});
        if (ref $s eq "ARRAY") {
            for (@$s) {
                if (defined $cfg->{twitter}->{$_->{screen_name}}->{status} and defined $_->{status}->{id} and
                        $cfg->{twitter}->{$_->{screen_name}}->{status} ne $_->{status}->{id}) {
                    # new tweet or retweet detected
                    my $kind = (defined $_->{status}->{retweeted_status}) ? "Retweet" : "Tweet";
                    my $text = "[$kind] https://twitter.com/$_->{screen_name}/status/$_->{status}->{id}\n";
                    relay($text);
                    open my $w, ">>", $cfg->{irc}->{infile};
                    print $w $text;
                    close $w;
                }
                $cfg->{twitter}->{$_->{screen_name}}->{status} = $_->{status}->{id};
            }
        } else {
            print $dbg "lookup_users failed; ref equals " . ref $s . "\n" if defined $dbg;
        }
    };
    unless ($result) {
        print $@;
        print $dbg $@ if defined $dbg;
    }
}

sub _start {
    # file to be read and send to the channel
    $irc->plugin_add( 'FollowTail' => POE::Component::IRC::Plugin::FollowTail->new(
        filename => $cfg->{irc}->{infile},
    ));
    $irc->yield( register => 'all' );
    $irc->yield( connect => { } );
    return;
}

sub irc_001 {
    my $sender = $_[SENDER];
    my $irc = $sender->get_heap();
    print "Connected to ", $irc->server_name(), "\n";
    print $dbg "Connected to ", $irc->server_name(), "\n" if defined $dbg;

    # we join our channel
    $irc->yield( join => $cfg->{irc}->{channel} );
}

sub irc_public {
    my ($sender, $who, $where, $what) = @_[SENDER, ARG0 .. ARG2];
    my $nick = ( split /!/, $who )[0];
    my $text = "[IRC] $nick: $what\n";
    relay($text);
}

sub irc_ctcp_action {
    my ($sender, $who, $where, $what) = @_[SENDER, ARG0 .. ARG2];
    my $nick = ( split /!/, $who )[0];
    my $text = "[IRC] ***$nick $what\n";
    relay($text);
}

sub irc_join {
    my ($who,$channel) = @_[ARG0, ARG1];
    my $nick = ( split /!/, $who )[0];
    my $text = "[IRC] $nick joined the chat\n";
    relay($text) if defined $cfg->{irc}->{showjoin};
}

sub irc_quit {
    my ($who,$msg) = @_[ARG0, ARG1];
    my $nick = ( split /!/, $who )[0];
    my $text = "[IRC] $nick quit the chat ($msg)\n";
    relay($text) if defined $cfg->{irc}->{showquit};
}

sub irc_tail_input {
    my ($kernel, $sender, $input) = @_[KERNEL, SENDER, ARG1];
    $kernel->post( $sender, 'privmsg', $cfg->{irc}->{channel}, $input );
}

# This will produce some debug info.
sub _default {
    my ($event, $args) = @_[ARG0 .. $#_];
    my @output = ( "$event: " );

    for my $arg (@$args) {
        if ( ref $arg eq 'ARRAY' ) {
            push( @output, '[' . join(', ', @$arg ) . ']' );
        }
        else {
            push ( @output, "'$arg'" );
        }
    }
    print join ' ', @output, "\n";
    print $dbg join ' ', @output, "\n" if defined $dbg;
    die "I got disconnected :( :(\nKilling myself..\n" if grep(/irc_disconnect/,@output);
}

sub relay {
    my $text = shift;
    my $telmsg;
    print $text;
    print $dbg $text if defined $dbg;

    # we relay straight to telegram
    eval { $telmsg = uri_escape($text); };
    $telmsg = uri_escape_utf8($text) if $@;
    HTTP::Tiny->new->get( "$URL?chat_id=$cfg->{telegram}->{chat_id}&text=$telmsg" );

    # we write to the signal infile
    open my $w, ">>", $cfg->{signal}->{infile};
    print $w $text;
    close $w;
}
